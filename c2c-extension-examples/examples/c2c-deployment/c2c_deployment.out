# In order to override the default values given by the compiler, we’ll be making Ballerina.cloud file in the project directory. This follows toml rules. We’ll use the following values for simplicity. All the supported key value properties can be found in code to cloud specification.

[container.image]
repository="wso2inc"
name="hello"
tag="v0.1.0"

# Note that ballerina build should be executed in the project directory. Code to Cloud generates only one container per project.
$ ballerina build -a

Compiling source
        wso2/hello:0.1.0

Creating balos
        target/balo/hello-2020r2-any-0.1.0.balo

Running Tests

        wso2/hello:0.1.0
        No tests found

Generating executables
        target/bin/hello.jar

Generating artifacts...

        @kubernetes:Service                      - complete 1/1
        @kubernetes:Deployment                   - complete 1/1
        @kubernetes:HPA                          - complete 1/1
        @kubernetes:Docker                       - complete 2/2

        Execute the below command to deploy the Kubernetes artifacts:
        kubectl apply -f /home/wso2/test/c2c-slp6/target/kubernetes/hello

        Execute the below command to access service via NodePort:
        kubectl expose deployment wso2-hello-0--deployment --type=NodePort --name=wso2-hello-0--svc-local



# Let’s try executing the docker image separately first.

# Verify if the Docker image is generated
$ docker images

REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE
wso2inc/hello                       v0.1.0              60d95f0928b2        About a minute ago   228MB

# Run the generated docker image
$ docker run -d -p 9090:9090 wso2inc/hello:v0.1.0
c04194eb0b4d0d78cbc8ca55e0527d381d8ab4a1a68f8ea5dd3770a0845d5fbb

# Access the Service
$ curl http://localhost:9090/helloWorld/sayHello
Hello, World from service helloWorld !

# Lets try executing Kubernetes service now.
$ kubectl apply -f /home/wso2/test/c2c-slp6/target/kubernetes/hello
service/helloep-svc created
deployment.apps/wso2-hello-0--deployment created
horizontalpodautoscaler.autoscaling/wso2-hello-0--hpa created

# Verify kubernetes pods
$ kubectl get pods
NAME                                          READY   STATUS    RESTARTS   AGE
wso2-hello-0--deployment-7d4d56457b-7jlzx   1/1     Running   0          57s

# Expose via nodeport to test in the developer environment.
$ kubectl expose deployment wso2-hello-0--deployment --type=NodePort --name=wso2-hello-0--svc-local
service/wso2-hello-0--svc-local exposed

#Get ip and port of the kubernetes service.
$ kubectl get svc
NAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)          AGE
wso2-hello-0--svc-local   NodePort    10.111.61.112    <none>        9090:32437/TCP   4m17s

# If you are using minikube, IP address should be changed according to the output of the `minikube ip` command.
$ minikube ip
192.168.49.2

# Access the deployed service via curl
$ curl http://192.168.49.2:32437/helloWorld/sayHello
Hello, World from service helloWorld !
