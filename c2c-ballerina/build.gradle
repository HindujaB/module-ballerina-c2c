/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - Code2Cloud Extension Annotations'

configurations {
    bDistributionDir
    balTools
    zipPartent
    extensionPlugin
}

dependencies {
    balTools("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    extensionPlugin project(path: ":c2c-extension", configuration: "shadow")
}

jar {
    enabled = false
}

clean {
    delete "$project.projectDir/output"
    delete "$project.projectDir/target"
    delete "$project.projectDir/Ballerina.lock"
}

def bDistribution = file("$project.buildDir/extracted-distribution/jballerina-tools-${ballerinaLangVersion}")

task unzip {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File(project.buildDir, "extracted-distribution/")
            }
        }
    }
    outputs.dir bDistribution
}

task unpackStdLibs() {
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/extracted-distribution", artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    into bDistribution

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/extracted-distribution/" + artifact.name + "-zip"
        into("repo/balo") {
            from "${artifactExtractedPath}/balo/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

task copyThridPartyDependencies(type: Copy) {
    from configurations.thirdPartyJars
    into "${bDistribution}/bre/lib"
}

def ballerinaToml = file("$project.projectDir/Ballerina.toml")
def semverMatcher = ballerinaToml.getText("UTF-8") =~ /(([0-9]+)\.([0-9]+)\.([0-9]+))/
def tomlSemver = semverMatcher[0][1]


def artifactParent = file("$project.projectDir/build/target/c2c-ballerina-zip/")
def artifactDocs = file("$project.buildDir/apidocs/docs/")
def artifactBalo = file("$project.projectDir/target/balo")
def artifactCache = file("$project.projectDir/target/cache/")

task ballerinaBuild {
    dependsOn unzip
    dependsOn configurations.extensionPlugin
    inputs.dir file("$project.projectDir")
    inputs.file file("$project.projectDir/Ballerina.toml")
    doLast {
        def distributionBinPath = project.projectDir.absolutePath + "/build/extracted-distribution/jballerina-tools-${ballerinaLangVersion}/bin"
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat doc"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/bal doc"
            }
        }
        copy {
            from file("$project.projectDir/target/apidocs/c2c")
            into file("$project.buildDir/apidocs/docs/c2c")
        }
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat build -c --skip-tests"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/bal build -c --skip-tests"
            }
        }
        copy {
            from file("$artifactBalo")
            into file("$artifactParent/balo/ballerina/cloud/$tomlSemver")
        }
        copy {
            from file("$artifactDocs")
            into file("$artifactParent/docs")
        }
        copy {
            from configurations.extensionPlugin
            into file("${artifactParent}/libs")
        }
        copy {
            from file("$artifactCache")
            into file("$artifactParent/cache")
        }

    }
    outputs.dir file("$artifactParent")
}

artifacts {
    bDistributionDir file: bDistribution, builtBy: unzip
    zipPartent file: artifactParent, builtBy: ballerinaBuild
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("$buildDir/distributions")
    from ballerinaBuild
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-ballerina-c2c")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

unpackStdLibs.dependsOn unzip
copyStdlibs.dependsOn unpackStdLibs
copyThridPartyDependencies.dependsOn copyStdlibs
ballerinaBuild.dependsOn copyThridPartyDependencies
build.dependsOn ballerinaBuild
